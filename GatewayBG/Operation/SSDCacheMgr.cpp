//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : SSDCacheMgr.cpp
//  @ Date : 2011-8-4
//  @ Author : @gfl
//
//

#include <sstream>
#include "Utils/Log/Log.h"
#include "GatewayBG/Operation/SSDCacheMgr.h"
#include "GatewayBG/Operation/DiskMgr.h"
#include "Utils/CommonOpr/ChildProcessOpr.h"
#include "Utils/CommonOpr/DirFileOpr.h"
using std::istringstream;

SSDCacheMgr::SSDCacheMgr():m_CacheDevPath("/dev/mapper/cachedev"), m_CacheDevName("cachedev")
{
}

SSDCacheMgr::~SSDCacheMgr()
{
}

int SSDCacheMgr::CreateCacheDev(const string& ssd, const string& sas)
{
        ChildProcessOpr cmdOpr;
        string cmd = "flashcache_create " + m_CacheDevName+ " " + ssd + " " + sas;

        if (cmdOpr.ExecuteCmd(cmd) != 0) {
                LOG_ERROR("create flash cache error"); 
                return -1;
        }
        return 0;
}

int SSDCacheMgr::DestroyCacheDev()
{
        int ret = 0;
        string mp;
        string ssd;
        string sas;
        string cacheDev;
        ChildProcessOpr cmdOpr;

        ret = GetCacheInfo(cacheDev, ssd, sas, mp);
        if (ret != 0) {
                LOG_ERROR("get cachedev info error"); 
                return -1;
        }
        string cmd = "dmsetup remove " + m_CacheDevPath;

        ret = cmdOpr.ExecuteCmd(cmd.c_str());
        if (ret != 0) {
                LOG_INFO("remove cachedev error"); 
        }

        cmd = "flashcache_destroy " + ssd;
        ret = cmdOpr.ExecuteCmd(cmd.c_str());
        if (ret != 0) {
                LOG_INFO("destroy flashcache error cmd=" << cmd); 
                return -2;
        }
        return 0;
}

int SSDCacheMgr::MountCacheDev(const string& mp)
{
        ChildProcessOpr cmdOpr;
        string cmd = "mount " + m_CacheDevPath + " " + mp;
        DirFileOpr dfOpr;
        if (!dfOpr.IsDir(mp)) {
                if (dfOpr.MakeDir(mp) != 0) {
                        LOG_INFO("make mount point for cachedev error"); 
                }
        }

        if (cmdOpr.ExecuteCmd(cmd) != 0) {
                cmd = "mkfs.ext3 " + m_CacheDevPath + " > /dev/null";
                if (cmdOpr.ExecuteCmd(cmd) != 0) {
                        LOG_ERROR("make filesystem error"); 
                        return -1;
                }
                cmd = "mount " + m_CacheDevPath + " " + mp;
                if (cmdOpr.ExecuteCmd(cmd) != 0) {
                        LOG_ERROR("mount error"); 
                        return -2;
                }
        }
        return 0;
}

int SSDCacheMgr::UnMountCacheDev()
{
        ChildProcessOpr cmdOpr;
        string cmd = "umount " + m_CacheDevPath;

        if (cmdOpr.ExecuteCmd(cmd) != 0) {
                LOG_ERROR("umount error"); 
                return -1;
        }

        return 0;
}

int SSDCacheMgr::GetCacheInfo(string& cacheDev, string& ssd, string& sas, string& mp)
{
        if (access(m_CacheDevPath.c_str(), F_OK) != 0) {
                LOG_INFO("no cachedev");
                return 0; 
        }
        string fs;                                      //缓存设备挂载文件系统，不用
        DiskMgr diskMgr;
        diskMgr.GetDiskMountPoint(m_CacheDevPath, mp, fs);

        string cmd = "dmsetup table " + m_CacheDevName + "|grep \"ssd dev\"|awk -F \"[()]\" '{print $2\" \"$4}'";
        FILE *stream = popen(cmd.c_str(), "r");
        if (NULL == stream) {
                LOG_ERROR("open stream error"); 
                return -1;

        }

        const int bufLen = 32;
        char lineBuf[bufLen];
        fgets(lineBuf, bufLen, stream); 
        istringstream si(lineBuf);
        si >> ssd >> sas;
        cacheDev = m_CacheDevPath;

        if (pclose(stream) != 0) {
                LOG_ERROR("close stream error"); 
        }
        return 0;
}
