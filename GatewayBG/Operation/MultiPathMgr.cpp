//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : MultiPathMgr.cpp
//  @ Date : 2011-8-4
//  @ Author : @gfl
//
//

#include "Utils/Log/Log.h"
#include "GatewayBG/Operation/MultiPathMgr.h"
#include "Utils/CommonOpr/ChildProcessOpr.h"

int MultiPathMgr::StartMPService()
{
        ChildProcessOpr cmdOpr;
        /*
        const string cmd = "bash /usr/sbin/multipath.sh";

        if (cmdOpr.ExecuteCmd(cmd.c_str()) != 0) {
                LOG_ERROR("set multipathd config file error"); 
                return -1;
        }
        */

        if (cmdOpr.ExecuteCmd("service multipathd restart") != 0) {
                LOG_ERROR("set multipathd config file error"); 
                return -2;
        }
        return 0;
}

int MultiPathMgr::StopMPService()
{

        ChildProcessOpr cmdOpr;

        FILE *stream = popen("mount 2>/dev/null |grep \"^/dev/mapper/mpath\"", "r");
        if (NULL == stream) {
                LOG_ERROR("get multipath mount information error"); 
                return -1;
        }

        const int LEN = 128;
        char buffer[LEN] = {0};
        if (fgets(buffer, LEN, stream)) {
                pclose(stream);
                return 2;                               //有挂载点
        }

        pclose(stream);

        if (cmdOpr.ExecuteCmd("service multipathd stop") != 0) {
                LOG_ERROR("stop multipathd service error"); 
                return -3;
        }
        return 0;
}

int MultiPathMgr::GetServiceStatus(ServiceStatus &status)
{
        string line;
        size_t len;
        char   *buf = NULL;
        string cmd = "service multipathd status|grep multipath";

        FILE *stream = popen(cmd.c_str(), "r");
        if (NULL == stream) {
                LOG_ERROR("get nfs status error");
                return -1;
        }
        if (getline(&buf, &len, stream) != -1) {
                line = buf;
                if (line.find("pid") != string::npos) {
                        status = RUNNING; 
                } else {
                        status = STOPPED; 
                }

        }
        free(buf);

        if (0 != pclose(stream)) {
                LOG_ERROR("close stream error");
        }
        return 0;	
}
